[{"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AddItemForm.stories.tsx":"1","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\EditableSpan.stories.tsx":"2","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\Task.stories.tsx":"3","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Button.stories.tsx":"4","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Header.stories.tsx":"5","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Page.stories.tsx":"6","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AppWithRedux.stories.tsx":"7","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AppWithRedux.tsx":"8","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Page.tsx":"9","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Header.tsx":"10","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\decorators\\ReduxStoreproviderDecorator.tsx":"11","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\todolists-reducer.ts":"12","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\tasks-reducer.ts":"13","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Button.tsx":"14","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AddItemForm.tsx":"15","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\Todolist.tsx":"16","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\Task.tsx":"17","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\EditableSpan.tsx":"18","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\index.tsx":"19","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\serviceWorker.ts":"20","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\store.tsx":"21","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\todolists-api.stories.tsx":"22","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\api\\todolist-api.ts":"23"},{"size":716,"mtime":1611764901228,"results":"24","hashOfConfig":"25"},{"size":728,"mtime":1611772169389,"results":"26","hashOfConfig":"25"},{"size":1045,"mtime":1611767061574,"results":"27","hashOfConfig":"25"},{"size":804,"mtime":499162500000,"results":"28","hashOfConfig":"25"},{"size":510,"mtime":499162500000,"results":"29","hashOfConfig":"25"},{"size":605,"mtime":499162500000,"results":"30","hashOfConfig":"25"},{"size":549,"mtime":1611769807179,"results":"31","hashOfConfig":"25"},{"size":4732,"mtime":1613562831398,"results":"32","hashOfConfig":"25"},{"size":2415,"mtime":499162500000,"results":"33","hashOfConfig":"25"},{"size":1356,"mtime":499162500000,"results":"34","hashOfConfig":"25"},{"size":1173,"mtime":1611770914599,"results":"35","hashOfConfig":"25"},{"size":2692,"mtime":1613561137743,"results":"36","hashOfConfig":"25"},{"size":3456,"mtime":1613565694184,"results":"37","hashOfConfig":"25"},{"size":941,"mtime":499162500000,"results":"38","hashOfConfig":"25"},{"size":1545,"mtime":1611761276241,"results":"39","hashOfConfig":"25"},{"size":3629,"mtime":1613565693312,"results":"40","hashOfConfig":"25"},{"size":1704,"mtime":1613565694318,"results":"41","hashOfConfig":"25"},{"size":1056,"mtime":1611765434175,"results":"42","hashOfConfig":"25"},{"size":415,"mtime":1610561875148,"results":"43","hashOfConfig":"25"},{"size":5295,"mtime":1604935061916,"results":"44","hashOfConfig":"25"},{"size":890,"mtime":1610558709802,"results":"45","hashOfConfig":"25"},{"size":6263,"mtime":1613511177082,"results":"46","hashOfConfig":"25"},{"size":2257,"mtime":1613561137675,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"w1e747",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"73","usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AddItemForm.stories.tsx",[],["103","104"],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\EditableSpan.stories.tsx",["105"],"import {action} from \"@storybook/addon-actions\";\r\n\r\nimport React from \"react\";\r\nimport EditableSpan, {EditableSpanPropsType} from \"./EditableSpan\";\r\n\r\nimport {Meta, Story} from \"@storybook/react/types-6-0\";\r\n\r\n\r\n\r\n\r\nexport default {\r\n    title: 'Todolist/EditableSpan',\r\n    component: EditableSpan,\r\n    argTypes: {\r\n        onChange: {\r\n            description: 'change value'\r\n        },\r\n        value: {\r\n            defaultValue: 'ASDD'\r\n        }\r\n    },\r\n    args: {}\r\n} as Meta;\r\n\r\n\r\n\r\nconst Template: Story<any> = (args) => <EditableSpan {...args}/>\r\n\r\n\r\n\r\nexport const EditableSpanExample = Template.bind({})\r\n\r\nEditableSpanExample.args = {\r\n    value: 'ASDD',\r\n    onChange: action('Value EditableSpan changed')\r\n\r\n}","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\Task.stories.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Button.stories.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Header.stories.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Page.stories.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AppWithRedux.stories.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AppWithRedux.tsx",[],["106","107"],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Page.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Header.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\decorators\\ReduxStoreproviderDecorator.tsx",["108","109"],"\r\nimport {Provider} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {combineReducers, createStore} from 'redux'\r\nimport {tasksReducer} from '../../state/tasks-reducer'\r\nimport {todoListsReducer} from '../../state/todolists-reducer'\r\nimport {v1} from 'uuid'\r\nimport {AppRootStateType} from '../../state/store'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n\r\nconst initialGlobalState = {\r\n    todoLists: [\r\n        {id: \"todolistId1\", title: \"What to learn\", filter: \"all\"},\r\n        {id: \"todolistId2\", title: \"What to buy\", filter: \"all\"}\r\n    ] ,\r\n    tasks: {\r\n        [\"todolistId1\"]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [\"todolistId2\"]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    }\r\n};\r\n\r\nexport const storyBookStore = createStore(rootReducer, initialGlobalState as AppRootStateType);\r\n\r\nexport const  ReduxStoreProviderDecorator = (storyFn: any) => {return <Provider store={storyBookStore}>{storyFn()}</Provider>}\r\n\r\n","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\todolists-reducer.ts",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\tasks-reducer.ts",["110"],"import {TasksStateType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\nimport {TaskStatuses, TodoTaskPriorities} from \"../api/todolist-api\";\r\n\r\nexport type removeActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n}\r\n\r\nexport type addTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nexport type changeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    status: TaskStatuses\r\n    todolistId: string\r\n}\r\n\r\nexport type changeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\ntype ActionsType = removeActionType |\r\n    addTaskActionType |\r\n    changeTaskStatusActionType |\r\n    changeTaskTitleActionType |\r\n    AddTodoListActionType |\r\n    RemoveTodolistActionType\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state}\r\n            copyState[action.todolistId] = copyState[action.todolistId].filter(task => task.id !== action.taskId)\r\n            return copyState\r\n        }\r\n        case \"ADD-TASK\": {\r\n            let copyState = {...state}\r\n            let newTask = { description: '',\r\n                title: action.title,\r\n                status: TaskStatuses.New,\r\n                priority: TodoTaskPriorities.Low,\r\n                startDate: '',\r\n                deadline: '',\r\n                id: v1(),\r\n                todoListId: action.todolistId,\r\n                order: 0,\r\n                addedDate: ''}\r\n            copyState[action.todolistId] = [newTask, ...copyState[action.todolistId]]\r\n            return copyState\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            state[action.todolistId] = state[action.todolistId]\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t)\r\n            return ({...state})\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            {\r\n                state[action.todolistId] = state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n                return ({...state})\r\n            }\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\":\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): removeActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\n\r\nexport const addTaskAC = (title: string, todolistId: string): addTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): changeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, status, todolistId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): changeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n\r\n","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Button.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AddItemForm.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\Todolist.tsx",["111","112","113","114","115","116"],"import React, {useCallback} from 'react'\r\n\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, ButtonGroup} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./state/Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\nimport {FilterValuesType} from \"./state/todolists-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeStatus: (taskId: string, status: TaskStatuses, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    changeFilter: (filterValue: FilterValuesType, todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n    removeTodoList: (id: string) => void\r\n}\r\n\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    let tasksForTodoList = props.tasks\r\n    if (props.filter === 'active') {\r\n        tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const tasks = tasksForTodoList.map(taskObj => <Task todoListId={props.id} changeStatus={props.changeStatus}\r\n                                                   removeTask={props.removeTask} changeTaskTitle={props.changeTaskTitle}\r\n                                                   task={taskObj}\r\n                                                   key={props.id}/>)\r\n\r\n    const removeTodoList = useCallback(() => props.removeTodoList(props.id), [props.removeTodoList, props.id])\r\n    const onClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n    const onClickHandlerActive = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n    const onClickHandlerCompleted = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        props.changeTodoListTitle(title, props.id)\r\n    }, [props.changeTodoListTitle, props.id])\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <h3>\r\n                <EditableSpan value={props.title} getNewTitle={changeTodoListTitle}/>\r\n                <Button onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </Button>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {tasks}\r\n            </div>\r\n            <div>\r\n                <ButtonGroup size={'small'}>\r\n                    <Button variant={props.filter === 'all' ? 'contained' : 'outlined'}\r\n                            onClick={onClickHandler}>All</Button>\r\n                    <Button color={'primary'} variant={props.filter === 'active' ? 'contained' : 'outlined'}\r\n                            onClick={onClickHandlerActive}>Active\r\n                    </Button>\r\n                    <Button color={'secondary'} variant={props.filter === 'completed' ? 'contained' : 'outlined'}\r\n                            onClick={onClickHandlerCompleted}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\Task.tsx",["117","118","119"],"import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"../EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"../Todolist\";\r\n\r\nexport type TaskPropsType = {\r\n    todoListId: string;\r\n    changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    task: TaskType\r\n}\r\n\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const removeTask = useCallback (() => props.removeTask(props.task.id, props.todoListId),[props.removeTask,props.task.id,props.todoListId])\r\n    const changeStatus = useCallback ((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(props.task.id, e.currentTarget.checked, props.todoListId)\r\n    },[props.changeStatus,props.task.id,props.todoListId])\r\n    const changeTaskTitle = useCallback ((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todoListId)\r\n    },[props.changeTaskTitle,props.task.id,props.todoListId])\r\n    return <li key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            onChange={changeStatus}\r\n            color={'primary'}\r\n            checked={props.task.isDone}/>\r\n        <EditableSpan value={props.task.title} getNewTitle={changeTaskTitle}/>\r\n        <IconButton onClick={removeTask}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </li>\r\n\r\n})\r\n",["120","121"],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\EditableSpan.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\index.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\serviceWorker.ts",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\store.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\todolists-api.stories.tsx",["122"],"import React, {useEffect, useState} from 'react'\r\n\r\nimport {todolistAPI} from \"../api/todolist-api\";\r\n\r\nexport default {\r\n    title: 'API'\r\n}\r\n\r\n\r\nexport const GetTodoLists = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    useEffect(() => {\r\n        todolistAPI.getTodolist()\r\n            .then((res) => {\r\n                setState(res.data);\r\n            })\r\n\r\n    }, [])\r\n\r\n    return <div> {JSON.stringify(state)}</div>\r\n}\r\n\r\nexport const GetTasks = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    const [todoListId, setTodoListId] = useState<string>('')\r\n    const getTasks = () => {\r\n        todolistAPI.getTasks(todoListId)\r\n            .then((res) => {\r\n                setState(res.data);\r\n            })\r\n\r\n    }\r\n\r\n    return <div>\r\n        <input placeholder={'todolistId'} type=\"text\" value={todoListId} onChange={(e) => {\r\n            setTodoListId(e.currentTarget.value)\r\n        }}/>\r\n\r\n        <button onClick={getTasks}>get tasks</button>\r\n\r\n\r\n        {JSON.stringify(state)}</div>\r\n}\r\n\r\nexport const CreateTodolist = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    useEffect(() => {\r\n        todolistAPI.createTodoListId('NewTITLE').then((res) => {\r\n            setState(res.data);\r\n        })\r\n\r\n    }, [])\r\n\r\n    return <div> {JSON.stringify(state)}</div>\r\n}\r\n\r\nexport const CreateTask = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    const [todoListId, setTodoListId] = useState<string>('')\r\n    const [title, setTitle] = useState<string>('')\r\n    const createTask = () => {\r\n        todolistAPI.createTask(todoListId, title).then((res) => {\r\n            setState(res.data);\r\n        })\r\n\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <input placeholder={'todolistId'} type=\"text\" value={todoListId} onChange={(e) => {\r\n                setTodoListId(e.currentTarget.value)\r\n            }}/>\r\n            <input placeholder={'title'} type=\"text\" value={title} onChange={(e) => {\r\n                setTitle(e.currentTarget.value)\r\n            }}/>\r\n            <button onClick={createTask}>create task</button>\r\n        </div>\r\n        {JSON.stringify(state)}\r\n    </div>\r\n}\r\n\r\nexport const DeleteTodolist = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    useEffect(() => {\r\n        const todolistId = 'e91c17ee-9263-457c-ba34-dd4448283ef5';\r\n        todolistAPI.deleteTodoList(`${todolistId}`).then((res) => {\r\n            setState(res.data);\r\n        })\r\n\r\n    }, [])\r\n\r\n    return <div> {JSON.stringify(state)}</div>\r\n}\r\n\r\nexport const DeleteTask = () => {\r\n\r\n    const [state, setState] = useState<any>(null)\r\n    const [todolistId, setTodolistId] = useState<string>('')\r\n    const [taskId, setTaskId] = useState<string>('')\r\n\r\n    const deleteTask = () => {\r\n        todolistAPI.deleteTask(todolistId, taskId).then((res) => {\r\n            setState(res.data);\r\n        })\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <input placeholder={'todolistId'} type=\"text\" value={todolistId} onChange={(e) => {\r\n                setTodolistId(e.currentTarget.value)\r\n            }}/>\r\n            <input placeholder={'taskId'} type=\"text\" value={taskId} onChange={(e) => {\r\n                setTaskId(e.currentTarget.value)\r\n            }}/>\r\n            <button onClick={deleteTask}>delete task</button>\r\n        </div>\r\n        {JSON.stringify(state)}\r\n    </div>\r\n\r\n}\r\nexport const UpdateTodolistTitle = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    const [todolistId, setTodolistId] = useState<string>('')\r\n    const [taskTitle, setTaskTitle] = useState<string>('')\r\n\r\n\r\n    const updateTodolist = () => {\r\n        todolistAPI.updateTodolist(todolistId, taskTitle)\r\n            .then((res) => {\r\n                setState(res.data)\r\n            })\r\n    }\r\n\r\n    return (<div>\r\n        <input placeholder={'todolistId'} value={todolistId} onChange={(e) => {\r\n            setTodolistId(e.currentTarget.value)\r\n        }}/>\r\n        <input placeholder={'taskTitle'} value={taskTitle} onChange={(e) => {\r\n            setTaskTitle(e.currentTarget.value)\r\n        }}/>\r\n        <button onClick={updateTodolist}>updateTodolist</button>\r\n\r\n        <div>{JSON.stringify(state)}</div>\r\n    </div>)\r\n}\r\n\r\nexport const UpdateTask = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    const [todolistId, setTodolistId] = useState<string>('')\r\n    const [taskTitle, setTaskTitle] = useState<string>('')\r\n    const [taskId, setTaskId] = useState<string>('')\r\n    const [description, setDescription] = useState<string>('')\r\n    const [status, setStatus] = useState<number>(0)\r\n    const [priority, setPriority] = useState<number>(0)\r\n    const [deadLine, setDeadLine] = useState<string>('')\r\n\r\n    const updateTask = () => {\r\n        todolistAPI.updateTask(todolistId, taskId, {\r\n            deadline: deadLine,\r\n            description: description,\r\n            priority: priority,\r\n            startDate: '',\r\n            status: status,\r\n            title: taskTitle\r\n\r\n        })\r\n            .then((res) => {\r\n                setState(res.data)\r\n            })\r\n    }\r\n\r\n    return <div>\r\n        <input placeholder={'todolistId'} value={todolistId} onChange={(e) => {\r\n            setTodolistId(e.currentTarget.value)\r\n        }}/>\r\n        <input placeholder={'taskTitle'} value={taskTitle} onChange={(e) => {\r\n            setTaskTitle(e.currentTarget.value)\r\n        }}/>\r\n        <input placeholder={'taskId'} value={taskId} onChange={(e) => {\r\n            setTaskId(e.currentTarget.value)\r\n        }}/>\r\n        <input placeholder={'description'} value={description} onChange={(e) => {\r\n            setDescription(e.currentTarget.value)\r\n        }}/>\r\n        <input placeholder={'status'} value={status} type={'number'} onChange={(e) => {\r\n            setStatus(e.currentTarget.valueAsNumber)\r\n        }}/>\r\n        <input placeholder={'priority'} value={priority} type={'number'} onChange={(e) => {\r\n            setPriority(e.currentTarget.valueAsNumber)\r\n        }}/>\r\n\r\n        <input placeholder={'deadLine'} value={deadLine} onChange={(e) => {\r\n            setDeadLine(e.currentTarget.value)\r\n        }}/>\r\n        <button onClick={updateTask}>updateTask</button>\r\n\r\n        {JSON.stringify(state)}\r\n    </div>\r\n}\r\n\r\n\r\n","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\api\\todolist-api.ts",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":4,"column":23,"nodeType":"129","messageId":"130","endLine":4,"endColumn":44},{"ruleId":"123","replacedBy":"131"},{"ruleId":"125","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":21,"column":9,"nodeType":"135","messageId":"136","endLine":24,"endColumn":10,"fix":"137"},{"ruleId":"133","severity":1,"message":"138","line":25,"column":9,"nodeType":"135","messageId":"136","endLine":28,"endColumn":10,"fix":"139"},{"ruleId":"140","severity":1,"message":"141","line":61,"column":13,"nodeType":"142","messageId":"143","endLine":65,"endColumn":14},{"ruleId":"144","severity":1,"message":"145","line":42,"column":78,"nodeType":"146","endLine":42,"endColumn":110,"suggestions":"147"},{"ruleId":"144","severity":1,"message":"145","line":43,"column":83,"nodeType":"146","endLine":43,"endColumn":113,"suggestions":"148"},{"ruleId":"144","severity":1,"message":"145","line":44,"column":92,"nodeType":"146","endLine":44,"endColumn":122,"suggestions":"149"},{"ruleId":"144","severity":1,"message":"145","line":45,"column":98,"nodeType":"146","endLine":45,"endColumn":128,"suggestions":"150"},{"ruleId":"144","severity":1,"message":"145","line":48,"column":8,"nodeType":"146","endLine":48,"endColumn":33,"suggestions":"151"},{"ruleId":"144","severity":1,"message":"145","line":51,"column":8,"nodeType":"146","endLine":51,"endColumn":45,"suggestions":"152"},{"ruleId":"144","severity":1,"message":"145","line":16,"column":93,"nodeType":"146","endLine":16,"endColumn":142,"suggestions":"153"},{"ruleId":"144","severity":1,"message":"145","line":19,"column":7,"nodeType":"146","endLine":19,"endColumn":58,"suggestions":"154"},{"ruleId":"144","severity":1,"message":"145","line":22,"column":7,"nodeType":"146","endLine":22,"endColumn":61,"suggestions":"155"},{"ruleId":"123","replacedBy":"156"},{"ruleId":"125","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":5,"column":1,"nodeType":"160","endLine":7,"endColumn":2},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"@typescript-eslint/no-unused-vars","'EditableSpanPropsType' is defined but never used.","Identifier","unusedVar",["161"],["162"],"no-useless-computed-key","Unnecessarily computed property [\"todolistId1\"] found.","Property","unnecessarilyComputedProperty",{"range":"163","text":"164"},"Unnecessarily computed property [\"todolistId2\"] found.",{"range":"165","text":"166"},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["167"],["168"],["169"],["170"],["171"],["172"],["173"],["174"],["175"],["161"],["162"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",[638,653],"\"todolistId1\"",[787,802],"\"todolistId2\"",{"desc":"176","fix":"177"},{"desc":"176","fix":"178"},{"desc":"176","fix":"179"},{"desc":"176","fix":"180"},{"desc":"176","fix":"181"},{"desc":"176","fix":"182"},{"desc":"176","fix":"183"},{"desc":"176","fix":"184"},{"desc":"176","fix":"185"},"Update the dependencies array to be: [props]",{"range":"186","text":"187"},{"range":"188","text":"187"},{"range":"189","text":"187"},{"range":"190","text":"187"},{"range":"191","text":"187"},{"range":"192","text":"187"},{"range":"193","text":"187"},{"range":"194","text":"187"},{"range":"195","text":"187"},[1822,1854],"[props]",[1939,1969],[2063,2093],[2193,2223],[2327,2352],[2480,2517],[702,751],[925,976],[1119,1173]]