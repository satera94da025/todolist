[{"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AddItemForm.stories.tsx":"1","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\EditableSpan.stories.tsx":"2","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\Task.stories.tsx":"3","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Button.stories.tsx":"4","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Header.stories.tsx":"5","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Page.stories.tsx":"6","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AppWithRedux.stories.tsx":"7","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AppWithRedux.tsx":"8","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Page.tsx":"9","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Header.tsx":"10","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\decorators\\ReduxStoreproviderDecorator.tsx":"11","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\todolists-reducer.ts":"12","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\tasks-reducer.ts":"13","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Button.tsx":"14","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AddItemForm.tsx":"15","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\Todolist.tsx":"16","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\Task.tsx":"17","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\EditableSpan.tsx":"18","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\index.tsx":"19","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\serviceWorker.ts":"20","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\store.tsx":"21","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\todolists-api.stories.tsx":"22","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\api\\todolist-api.ts":"23"},{"size":716,"mtime":1611764901228,"results":"24","hashOfConfig":"25"},{"size":728,"mtime":1611772169389,"results":"26","hashOfConfig":"25"},{"size":1045,"mtime":1611767061574,"results":"27","hashOfConfig":"25"},{"size":804,"mtime":499162500000,"results":"28","hashOfConfig":"25"},{"size":510,"mtime":499162500000,"results":"29","hashOfConfig":"25"},{"size":605,"mtime":499162500000,"results":"30","hashOfConfig":"25"},{"size":549,"mtime":1611769807179,"results":"31","hashOfConfig":"25"},{"size":4836,"mtime":1613592555292,"results":"32","hashOfConfig":"25"},{"size":2415,"mtime":499162500000,"results":"33","hashOfConfig":"25"},{"size":1356,"mtime":499162500000,"results":"34","hashOfConfig":"25"},{"size":1173,"mtime":1611770914599,"results":"35","hashOfConfig":"25"},{"size":3448,"mtime":1613592656188,"results":"36","hashOfConfig":"25"},{"size":4713,"mtime":1613592761963,"results":"37","hashOfConfig":"25"},{"size":941,"mtime":499162500000,"results":"38","hashOfConfig":"25"},{"size":1545,"mtime":1611761276241,"results":"39","hashOfConfig":"25"},{"size":3844,"mtime":1613593205176,"results":"40","hashOfConfig":"25"},{"size":1704,"mtime":1613565694318,"results":"41","hashOfConfig":"25"},{"size":1056,"mtime":1611765434175,"results":"42","hashOfConfig":"25"},{"size":415,"mtime":1610561875148,"results":"43","hashOfConfig":"25"},{"size":5295,"mtime":1604935061916,"results":"44","hashOfConfig":"25"},{"size":963,"mtime":1613590532432,"results":"45","hashOfConfig":"25"},{"size":6263,"mtime":1613511177082,"results":"46","hashOfConfig":"25"},{"size":2257,"mtime":1613561137675,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"w1e747",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"67"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AddItemForm.stories.tsx",[],["101","102"],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\EditableSpan.stories.tsx",["103"],"import {action} from \"@storybook/addon-actions\";\r\n\r\nimport React from \"react\";\r\nimport EditableSpan, {EditableSpanPropsType} from \"./EditableSpan\";\r\n\r\nimport {Meta, Story} from \"@storybook/react/types-6-0\";\r\n\r\n\r\n\r\n\r\nexport default {\r\n    title: 'Todolist/EditableSpan',\r\n    component: EditableSpan,\r\n    argTypes: {\r\n        onChange: {\r\n            description: 'change value'\r\n        },\r\n        value: {\r\n            defaultValue: 'ASDD'\r\n        }\r\n    },\r\n    args: {}\r\n} as Meta;\r\n\r\n\r\n\r\nconst Template: Story<any> = (args) => <EditableSpan {...args}/>\r\n\r\n\r\n\r\nexport const EditableSpanExample = Template.bind({})\r\n\r\nEditableSpanExample.args = {\r\n    value: 'ASDD',\r\n    onChange: action('Value EditableSpan changed')\r\n\r\n}","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\Task.stories.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Button.stories.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Header.stories.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Page.stories.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AppWithRedux.stories.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AppWithRedux.tsx",["104","105","106"],"import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport { Todolist} from \"./Todolist\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {\r\n    AddTodolistAC,\r\n    ChangeTodoListAC,\r\n    ChangeTodoListFilterAC, fetchTodolistTC,  FilterValuesType,\r\n    RemoveTodolistAC,  TodolistDomainType,\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\n\r\n\r\n\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst App = React.memo (() => {\r\n\r\n\r\n    let todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n    let tasks = useSelector<AppRootStateType,TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n            dispatch(fetchTodolistTC)\r\n    }, [])\r\n\r\n    const removeTask= useCallback((taskId: string, todoListId: string) =>{\r\n        dispatch(removeTaskAC(taskId, todoListId))\r\n    },[dispatch])\r\n\r\n    const addTask= useCallback((title: string, todoListId: string) =>{\r\n        dispatch(addTaskAC(title, todoListId))\r\n    },[dispatch])\r\n\r\n    const changeStatus= useCallback((taskId: string, status: TaskStatuses, todoListId: string) =>{\r\n        dispatch(changeTaskStatusAC(taskId, status, todoListId))\r\n    },[dispatch])\r\n\r\n    const changeTaskTitle= useCallback((taskId: string, title: string, todoListId: string) =>{\r\n        dispatch(changeTaskTitleAC(taskId, title, todoListId))\r\n    },[dispatch])\r\n\r\n    const removeTodoList= useCallback((id: string)=> {\r\n        dispatch(RemoveTodolistAC(id))\r\n\r\n    },[dispatch])\r\n\r\n    const addTodoList = useCallback ((title: string) =>{\r\n        let action = AddTodolistAC(title)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((title: string, todoListId: string) => {\r\n        dispatch(ChangeTodoListAC(title, todoListId))},[dispatch])\r\n\r\n    const changeFilter = useCallback((filterValue: FilterValuesType, todoListId: string) => {\r\n        dispatch(ChangeTodoListFilterAC(filterValue, todoListId))\r\n    },[dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todoLists.map(tl => {\r\n                            let taskForTodolist = tasks[tl.id]\r\n\r\n\r\n                            return (< Grid item>\r\n                                    <Paper style={{padding: '10px'}}>\r\n                                        <Todolist\r\n                                            key={tl.id}\r\n                                            id={tl.id}\r\n                                            title={tl.title}\r\n                                            tasks={taskForTodolist}\r\n                                            removeTask={removeTask}\r\n                                            removeTodoList={removeTodoList}\r\n                                            changeFilter={changeFilter}\r\n                                            addTask={addTask}\r\n                                            changeStatus={changeStatus}\r\n                                            filter={tl.filter}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                            changeTodoListTitle={changeTodoListTitle}\r\n                                         />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default App;\r\n",["107","108"],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Page.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Header.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\decorators\\ReduxStoreproviderDecorator.tsx",["109","110"],"\r\nimport {Provider} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {combineReducers, createStore} from 'redux'\r\nimport {tasksReducer} from '../../state/tasks-reducer'\r\nimport {todoListsReducer} from '../../state/todolists-reducer'\r\nimport {v1} from 'uuid'\r\nimport {AppRootStateType} from '../../state/store'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n\r\nconst initialGlobalState = {\r\n    todoLists: [\r\n        {id: \"todolistId1\", title: \"What to learn\", filter: \"all\"},\r\n        {id: \"todolistId2\", title: \"What to buy\", filter: \"all\"}\r\n    ] ,\r\n    tasks: {\r\n        [\"todolistId1\"]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [\"todolistId2\"]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    }\r\n};\r\n\r\nexport const storyBookStore = createStore(rootReducer, initialGlobalState as AppRootStateType);\r\n\r\nexport const  ReduxStoreProviderDecorator = (storyFn: any) => {return <Provider store={storyBookStore}>{storyFn()}</Provider>}\r\n\r\n","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\todolists-reducer.ts",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\tasks-reducer.ts",["111"],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\Button.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\AddItemForm.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\Todolist.tsx",["112","113","114","115","116","117"],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\Task.tsx",["118","119","120"],"import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"../EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"../Todolist\";\r\n\r\nexport type TaskPropsType = {\r\n    todoListId: string;\r\n    changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    task: TaskType\r\n}\r\n\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const removeTask = useCallback (() => props.removeTask(props.task.id, props.todoListId),[props.removeTask,props.task.id,props.todoListId])\r\n    const changeStatus = useCallback ((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(props.task.id, e.currentTarget.checked, props.todoListId)\r\n    },[props.changeStatus,props.task.id,props.todoListId])\r\n    const changeTaskTitle = useCallback ((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todoListId)\r\n    },[props.changeTaskTitle,props.task.id,props.todoListId])\r\n    return <li key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            onChange={changeStatus}\r\n            color={'primary'}\r\n            checked={props.task.isDone}/>\r\n        <EditableSpan value={props.task.title} getNewTitle={changeTaskTitle}/>\r\n        <IconButton onClick={removeTask}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </li>\r\n\r\n})\r\n","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\EditableSpan.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\index.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\serviceWorker.ts",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\state\\store.tsx",[],"C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\stories\\todolists-api.stories.tsx",["121"],"import React, {useEffect, useState} from 'react'\r\n\r\nimport {todolistAPI} from \"../api/todolist-api\";\r\n\r\nexport default {\r\n    title: 'API'\r\n}\r\n\r\n\r\nexport const GetTodoLists = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    useEffect(() => {\r\n        todolistAPI.getTodolist()\r\n            .then((res) => {\r\n                setState(res.data);\r\n            })\r\n\r\n    }, [])\r\n\r\n    return <div> {JSON.stringify(state)}</div>\r\n}\r\n\r\nexport const GetTasks = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    const [todoListId, setTodoListId] = useState<string>('')\r\n    const getTasks = () => {\r\n        todolistAPI.getTasks(todoListId)\r\n            .then((res) => {\r\n                setState(res.data);\r\n            })\r\n\r\n    }\r\n\r\n    return <div>\r\n        <input placeholder={'todolistId'} type=\"text\" value={todoListId} onChange={(e) => {\r\n            setTodoListId(e.currentTarget.value)\r\n        }}/>\r\n\r\n        <button onClick={getTasks}>get tasks</button>\r\n\r\n\r\n        {JSON.stringify(state)}</div>\r\n}\r\n\r\nexport const CreateTodolist = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    useEffect(() => {\r\n        todolistAPI.createTodoListId('NewTITLE').then((res) => {\r\n            setState(res.data);\r\n        })\r\n\r\n    }, [])\r\n\r\n    return <div> {JSON.stringify(state)}</div>\r\n}\r\n\r\nexport const CreateTask = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    const [todoListId, setTodoListId] = useState<string>('')\r\n    const [title, setTitle] = useState<string>('')\r\n    const createTask = () => {\r\n        todolistAPI.createTask(todoListId, title).then((res) => {\r\n            setState(res.data);\r\n        })\r\n\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <input placeholder={'todolistId'} type=\"text\" value={todoListId} onChange={(e) => {\r\n                setTodoListId(e.currentTarget.value)\r\n            }}/>\r\n            <input placeholder={'title'} type=\"text\" value={title} onChange={(e) => {\r\n                setTitle(e.currentTarget.value)\r\n            }}/>\r\n            <button onClick={createTask}>create task</button>\r\n        </div>\r\n        {JSON.stringify(state)}\r\n    </div>\r\n}\r\n\r\nexport const DeleteTodolist = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    useEffect(() => {\r\n        const todolistId = 'e91c17ee-9263-457c-ba34-dd4448283ef5';\r\n        todolistAPI.deleteTodoList(`${todolistId}`).then((res) => {\r\n            setState(res.data);\r\n        })\r\n\r\n    }, [])\r\n\r\n    return <div> {JSON.stringify(state)}</div>\r\n}\r\n\r\nexport const DeleteTask = () => {\r\n\r\n    const [state, setState] = useState<any>(null)\r\n    const [todolistId, setTodolistId] = useState<string>('')\r\n    const [taskId, setTaskId] = useState<string>('')\r\n\r\n    const deleteTask = () => {\r\n        todolistAPI.deleteTask(todolistId, taskId).then((res) => {\r\n            setState(res.data);\r\n        })\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <input placeholder={'todolistId'} type=\"text\" value={todolistId} onChange={(e) => {\r\n                setTodolistId(e.currentTarget.value)\r\n            }}/>\r\n            <input placeholder={'taskId'} type=\"text\" value={taskId} onChange={(e) => {\r\n                setTaskId(e.currentTarget.value)\r\n            }}/>\r\n            <button onClick={deleteTask}>delete task</button>\r\n        </div>\r\n        {JSON.stringify(state)}\r\n    </div>\r\n\r\n}\r\nexport const UpdateTodolistTitle = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    const [todolistId, setTodolistId] = useState<string>('')\r\n    const [taskTitle, setTaskTitle] = useState<string>('')\r\n\r\n\r\n    const updateTodolist = () => {\r\n        todolistAPI.updateTodolist(todolistId, taskTitle)\r\n            .then((res) => {\r\n                setState(res.data)\r\n            })\r\n    }\r\n\r\n    return (<div>\r\n        <input placeholder={'todolistId'} value={todolistId} onChange={(e) => {\r\n            setTodolistId(e.currentTarget.value)\r\n        }}/>\r\n        <input placeholder={'taskTitle'} value={taskTitle} onChange={(e) => {\r\n            setTaskTitle(e.currentTarget.value)\r\n        }}/>\r\n        <button onClick={updateTodolist}>updateTodolist</button>\r\n\r\n        <div>{JSON.stringify(state)}</div>\r\n    </div>)\r\n}\r\n\r\nexport const UpdateTask = () => {\r\n    const [state, setState] = useState<any>(null)\r\n    const [todolistId, setTodolistId] = useState<string>('')\r\n    const [taskTitle, setTaskTitle] = useState<string>('')\r\n    const [taskId, setTaskId] = useState<string>('')\r\n    const [description, setDescription] = useState<string>('')\r\n    const [status, setStatus] = useState<number>(0)\r\n    const [priority, setPriority] = useState<number>(0)\r\n    const [deadLine, setDeadLine] = useState<string>('')\r\n\r\n    const updateTask = () => {\r\n        todolistAPI.updateTask(todolistId, taskId, {\r\n            deadline: deadLine,\r\n            description: description,\r\n            priority: priority,\r\n            startDate: '',\r\n            status: status,\r\n            title: taskTitle\r\n\r\n        })\r\n            .then((res) => {\r\n                setState(res.data)\r\n            })\r\n    }\r\n\r\n    return <div>\r\n        <input placeholder={'todolistId'} value={todolistId} onChange={(e) => {\r\n            setTodolistId(e.currentTarget.value)\r\n        }}/>\r\n        <input placeholder={'taskTitle'} value={taskTitle} onChange={(e) => {\r\n            setTaskTitle(e.currentTarget.value)\r\n        }}/>\r\n        <input placeholder={'taskId'} value={taskId} onChange={(e) => {\r\n            setTaskId(e.currentTarget.value)\r\n        }}/>\r\n        <input placeholder={'description'} value={description} onChange={(e) => {\r\n            setDescription(e.currentTarget.value)\r\n        }}/>\r\n        <input placeholder={'status'} value={status} type={'number'} onChange={(e) => {\r\n            setStatus(e.currentTarget.valueAsNumber)\r\n        }}/>\r\n        <input placeholder={'priority'} value={priority} type={'number'} onChange={(e) => {\r\n            setPriority(e.currentTarget.valueAsNumber)\r\n        }}/>\r\n\r\n        <input placeholder={'deadLine'} value={deadLine} onChange={(e) => {\r\n            setDeadLine(e.currentTarget.value)\r\n        }}/>\r\n        <button onClick={updateTask}>updateTask</button>\r\n\r\n        {JSON.stringify(state)}\r\n    </div>\r\n}\r\n\r\n\r\n","C:\\Users\\bogda\\WebstormProjects\\it-incubator-todolist-ts-01\\src\\api\\todolist-api.ts",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":4,"column":23,"nodeType":"128","messageId":"129","endLine":4,"endColumn":44},{"ruleId":"126","severity":1,"message":"130","line":16,"column":23,"nodeType":"128","messageId":"129","endLine":16,"endColumn":36},{"ruleId":"126","severity":1,"message":"131","line":21,"column":33,"nodeType":"128","messageId":"129","endLine":21,"endColumn":44},{"ruleId":"132","severity":1,"message":"133","line":40,"column":8,"nodeType":"134","endLine":40,"endColumn":10,"suggestions":"135"},{"ruleId":"122","replacedBy":"136"},{"ruleId":"124","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":21,"column":9,"nodeType":"140","messageId":"141","endLine":24,"endColumn":10,"fix":"142"},{"ruleId":"138","severity":1,"message":"143","line":25,"column":9,"nodeType":"140","messageId":"141","endLine":28,"endColumn":10,"fix":"144"},{"ruleId":"145","severity":1,"message":"146","line":102,"column":13,"nodeType":"147","messageId":"148","endLine":106,"endColumn":14},{"ruleId":"132","severity":1,"message":"149","line":48,"column":78,"nodeType":"134","endLine":48,"endColumn":110,"suggestions":"150"},{"ruleId":"132","severity":1,"message":"149","line":49,"column":83,"nodeType":"134","endLine":49,"endColumn":113,"suggestions":"151"},{"ruleId":"132","severity":1,"message":"149","line":50,"column":92,"nodeType":"134","endLine":50,"endColumn":122,"suggestions":"152"},{"ruleId":"132","severity":1,"message":"149","line":51,"column":98,"nodeType":"134","endLine":51,"endColumn":128,"suggestions":"153"},{"ruleId":"132","severity":1,"message":"149","line":54,"column":8,"nodeType":"134","endLine":54,"endColumn":33,"suggestions":"154"},{"ruleId":"132","severity":1,"message":"149","line":57,"column":8,"nodeType":"134","endLine":57,"endColumn":45,"suggestions":"155"},{"ruleId":"132","severity":1,"message":"149","line":16,"column":93,"nodeType":"134","endLine":16,"endColumn":142,"suggestions":"156"},{"ruleId":"132","severity":1,"message":"149","line":19,"column":7,"nodeType":"134","endLine":19,"endColumn":58,"suggestions":"157"},{"ruleId":"132","severity":1,"message":"149","line":22,"column":7,"nodeType":"134","endLine":22,"endColumn":61,"suggestions":"158"},{"ruleId":"159","severity":1,"message":"160","line":5,"column":1,"nodeType":"161","endLine":7,"endColumn":2},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"@typescript-eslint/no-unused-vars","'EditableSpanPropsType' is defined but never used.","Identifier","unusedVar","'setTodolistAC' is defined but never used.","'todolistAPI' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["164"],["162"],["163"],"no-useless-computed-key","Unnecessarily computed property [\"todolistId1\"] found.","Property","unnecessarilyComputedProperty",{"range":"165","text":"166"},"Unnecessarily computed property [\"todolistId2\"] found.",{"range":"167","text":"168"},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["169"],["170"],["171"],["172"],["173"],["174"],["175"],["176"],["177"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},[638,653],"\"todolistId1\"",[787,802],"\"todolistId2\"",{"desc":"180","fix":"181"},{"desc":"180","fix":"182"},{"desc":"180","fix":"183"},{"desc":"180","fix":"184"},{"desc":"180","fix":"185"},{"desc":"180","fix":"186"},{"desc":"180","fix":"187"},{"desc":"180","fix":"188"},{"desc":"180","fix":"189"},"Update the dependencies array to be: [dispatch]",{"range":"190","text":"191"},"Update the dependencies array to be: [props]",{"range":"192","text":"193"},{"range":"194","text":"193"},{"range":"195","text":"193"},{"range":"196","text":"193"},{"range":"197","text":"193"},{"range":"198","text":"193"},{"range":"199","text":"193"},{"range":"200","text":"193"},{"range":"201","text":"193"},[1435,1437],"[dispatch]",[2037,2069],"[props]",[2154,2184],[2278,2308],[2408,2438],[2542,2567],[2695,2732],[702,751],[925,976],[1119,1173]]