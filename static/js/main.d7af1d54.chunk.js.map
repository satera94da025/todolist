{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodoListsLists/todolists-reducer.ts","features/TodoListsLists/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EtitableSpan/EditableSpan.tsx","features/TodoListsLists/TodoList/Task/Task.tsx","features/TodoListsLists/TodoList/Todolist.tsx","features/TodoListsLists/TodoListsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/AppWithRedux.tsx","app/store.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","title","put","get","delete","post","todoListId","taskId","model","initialState","status","error","SetAppStatusAC","type","setAppErrorAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","changeTodolistEntityStatusAC","entityStatus","fetchTasksTC","then","res","tasks","setTasksAC","items","catch","updateTaskTC","DomainModel","getState","task","find","t","id","startDate","priority","description","deadline","updateTaskAC","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trimmedTitle","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","variant","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","getNewTitle","autoFocus","onDoubleClick","Task","removeTask","useCallback","changeStatus","checked","Completed","New","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","tasksForTodoList","filter","map","taskObj","removeTodoList","onClickHandler","changeFilter","onClickHandlerActive","onClickHandlerCompleted","addTask","changeTodoListTitle","Button","ButtonGroup","size","TodoListsList","todoLists","useSelector","state","todolist","Id","removeTaskAC","resultCode","item","addTaskTC","addTodoList","todoList","addTodoListTC","ChangeTodoListAC","changeTodoListTC","filterValue","ChangeTodoListFilterAC","Grid","container","style","padding","spacing","tl","taskForTodolist","Paper","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","action","copyState","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","AppWithRedux","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.d7af1d54.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '63e080d1-f004-48f7-ae2d-df9d85d2ae65'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TodoTaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\ntype UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport const todolistAPI = {\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`/${todolistId}`, {title})\r\n    },\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistType>>('')\r\n    },\r\n    deleteTodoList(todolistId: string) {\r\n        return instance.delete<ResponseType>(`/${todolistId}`)\r\n    },\r\n    createTodoListId(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('', {title})\r\n    },\r\n    getTasks(todoListId: string) {\r\n        return instance.get<GetTasksResponse>(`/${todoListId}/tasks`)\r\n    },\r\n    createTask(todoListId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`/${todoListId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\r\n        return instance.put<UpdateTaskType>(`/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n","\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsTypeAPP): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ActionsTypeAPP = ReturnType<typeof SetAppStatusAC> | ReturnType<typeof setAppErrorAC>\r\n\r\nexport const SetAppStatusAC = (status: RequestStatusType) =>  ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) =>  ({type: 'APP/SET-ERROR', error} as const)\r\n","\r\nimport {\r\n    ActionsTypeAPP,\r\n    setAppErrorAC,\r\n\r\n    SetAppStatusAC,\r\n\r\n} from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport {ResponseType} from \"../api/todolist-api\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(SetAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(SetAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<ActionsTypeAPP>\r\n\r\n","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, SetAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\ntype ActionType =\r\n    | ReturnType<typeof RemoveTodolistAC>\r\n    | ReturnType<typeof AddTodolistAC>\r\n    | ReturnType<typeof ChangeTodoListAC>\r\n    | ReturnType<typeof ChangeTodoListFilterAC>\r\n    | ReturnType<typeof setTodolistAC>\r\n    | ReturnType<typeof SetAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const todoListsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLIST':\r\n            return action.todolist.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todoList, filter: \"all\", entityStatus:  'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\n\r\nexport const AddTodolistAC = (todoList: TodolistType) => ({type: 'ADD-TODOLIST', todoList} as const)\r\n\r\nexport const ChangeTodoListAC = (title: string, todoListId: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title,\r\n    todoListId\r\n} as const)\r\n\r\nexport const ChangeTodoListFilterAC = (filter: FilterValuesType, todoListId: string) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    filter,\r\n    todoListId\r\n} as const)\r\n\r\nexport const changeTodolistEntityStatusAC  = (todoListId: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    todoListId,\r\n    entityStatus\r\n} as const)\r\n\r\nexport const setTodolistAC = (todolist: Array<TodolistType>) => ({type: 'SET-TODOLIST', todolist} as const)\r\n\r\nexport const fetchTodolistTC = () => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    todolistAPI.getTodolist()\r\n        .then((res) => { debugger\r\n            dispatch(setTodolistAC(res.data))\r\n            dispatch(SetAppStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error,dispatch)\r\n    })\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    todolistAPI.createTodoListId(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0){\r\n                dispatch(AddTodolistAC(res.data.data.item))\r\n                dispatch(SetAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error,dispatch)\r\n    })\r\n}\r\n\r\nexport const changeTodoListTC = (title: string, todoListId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    todolistAPI.updateTodolist(todoListId, title)\r\n        .then(() => {\r\n            dispatch(ChangeTodoListAC(title, todoListId))\r\n            dispatch(SetAppStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error,dispatch)\r\n    })\r\n}\r\n\r\n\r\nexport const removeTodolistTC = (todolistId: string) =>\r\n    (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n        dispatch(SetAppStatusAC('loading'))\r\n        todolistAPI.deleteTodoList(todolistId)\r\n            .then(() => {\r\n                dispatch(RemoveTodolistAC(todolistId))\r\n                dispatch(SetAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todolistId,'succeeded'))\r\n            }).catch((error) => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n\r\n}","import {AddTodolistAC, changeTodolistEntityStatusAC, RemoveTodolistAC, setTodolistAC} from \"./todolists-reducer\";\r\nimport {TaskStatuses, TaskType, todolistAPI, TodoTaskPriorities} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC, SetAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n\r\n        case 'SET-TODOLIST': {\r\n            const copyState = {...state}\r\n            action.todolist.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(task => task.id !== action.taskId)}\r\n\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n\r\n        case \"UPDATE-TASK\":\r\n            return ({\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            })\r\n\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todoList.id]: []}\r\n\r\n        case \"REMOVE-TODOLIST\":\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof AddTodolistAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof RemoveTodolistAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof setTodolistAC>\r\n    | ReturnType<typeof SetAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\n\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\n\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    taskId,\r\n    model,\r\n    todolistId\r\n} as const)\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n            dispatch(SetAppStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error,dispatch)\r\n    })\r\n}\r\n\r\nexport const removeTasksTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then(()=> {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(SetAppStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error,dispatch)\r\n    })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(SetAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error,dispatch)\r\n    })\r\n}\r\n\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TodoTaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, DomainModel: UpdateDomainTaskModelType, todolistId: string) => (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n\r\n    const allTasksFromState = getState().tasks;\r\n    const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n    const task = tasksForCurrentTodolist.find(t => {\r\n        return t.id === taskId\r\n    })\r\n\r\n    if (task) {\r\n        dispatch(SetAppStatusAC('loading'))\r\n        todolistAPI.updateTask(todolistId, taskId, {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...DomainModel\r\n        }).then(() => {\r\n            dispatch(updateTaskAC(taskId, {}, todolistId))\r\n            dispatch(SetAppStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error,dispatch)\r\n    })\r\n}}\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n\r\n\r\n}\r\n\r\nexport const  AddItemForm = React.memo (function(props: AddItemFormPropsType) {\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null){\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {addItem()}\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                variant={'outlined'}\r\n                error={!!error}\r\n                label={'Input your title'}\r\n                helperText={error}\r\n                disabled={props.entityStatus === 'loading'}\r\n            />\r\n            <IconButton color={'primary'} onClick={addItem} disabled={props.entityStatus === 'loading'}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    getNewTitle: (title: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.value)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        if (title.trim())\r\n            props.getNewTitle(title.trim())\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                variant={'outlined'}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onChange={onChangeHandler}/>\r\n            : <span onDoubleClick={onEditMode}>{props.value}</span>\r\n    )\r\n})\r\n\r\nexport default EditableSpan\r\n\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"../../../../components/EtitableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\nexport type TaskPropsType = {\r\n    todoListId: string;\r\n    changeStatus: (taskId: string, status: TaskStatuses , todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    task: TaskType\r\n}\r\n\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const removeTask = useCallback (() => props.removeTask(props.task.id, props.todoListId),[props.removeTask,props.task.id,props.todoListId])\r\n    const changeStatus = useCallback ((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n    },[props.changeStatus,props.task.id,props.todoListId])\r\n    const changeTaskTitle = useCallback ((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todoListId)\r\n    },[props.changeTaskTitle,props.task.id,props.todoListId])\r\n    return <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            onChange={changeStatus}\r\n            color={'primary'}\r\n            checked={props.task.status === TaskStatuses.Completed}/>\r\n        <EditableSpan value={props.task.title} getNewTitle={changeTaskTitle}/>\r\n        <IconButton onClick={removeTask}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </li>\r\n\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\n\r\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../../../components/EtitableSpan/EditableSpan\";\r\nimport {Button, ButtonGroup} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {FilterValuesType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeStatus: (taskId: string, status: TaskStatuses, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    changeFilter: (filterValue: FilterValuesType, todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n    removeTodoList: (id: string) => void\r\n}\r\n\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    },[dispatch(fetchTasksTC(props.id))])\r\n\r\n    let tasksForTodoList = props.tasks\r\n    if (props.filter === 'active') {\r\n        tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const tasks = tasksForTodoList.map(taskObj => <Task todoListId={props.id} changeStatus={props.changeStatus}\r\n                                                   removeTask={props.removeTask} changeTaskTitle={props.changeTaskTitle}\r\n                                                   task={taskObj}\r\n                                                   key={props.id}/>)\r\n\r\n    const removeTodoList = useCallback(() => props.removeTodoList(props.id), [props.removeTodoList, props.id])\r\n    const onClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n    const onClickHandlerActive = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n    const onClickHandlerCompleted = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        props.changeTodoListTitle(title, props.id)\r\n    }, [props.changeTodoListTitle, props.id])\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <h3>\r\n                <EditableSpan value={props.title} getNewTitle={changeTodoListTitle}/>\r\n                <Button onClick={removeTodoList} disabled={props.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </Button>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} entityStatus={props.entityStatus} />\r\n            <div>\r\n                {tasks}\r\n            </div>\r\n            <div>\r\n                <ButtonGroup size={'small'}>\r\n                    <Button variant={props.filter === 'all' ? 'contained' : 'outlined'}\r\n                            onClick={onClickHandler}>All</Button>\r\n                    <Button color={'primary'} variant={props.filter === 'active' ? 'contained' : 'outlined'}\r\n                            onClick={onClickHandlerActive}>Active\r\n                    </Button>\r\n                    <Button color={'secondary'} variant={props.filter === 'completed' ? 'contained' : 'outlined'}\r\n                            onClick={onClickHandlerCompleted}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodoListTC, ChangeTodoListFilterAC,\r\n    changeTodoListTC,\r\n    fetchTodolistTC, FilterValuesType,\r\n     removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTasksTC, TasksStateType, updateTaskTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./TodoList/Todolist\";\r\n\r\n\r\n\r\n\r\nconst TodoListsList: React.FC = () => {\r\n\r\n\r\n    let todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((Id: string, todoListId: string) => {\r\n        dispatch(removeTasksTC(Id, todoListId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todoListId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todoListId: string) => {\r\n        dispatch(updateTaskTC(taskId, {title}, todoListId))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id))\r\n\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((title: string, todoListId: string) => {\r\n        dispatch(changeTodoListTC(title, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((filterValue: FilterValuesType, todoListId: string) => {\r\n        dispatch(ChangeTodoListFilterAC(filterValue, todoListId))\r\n    }, [dispatch])\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodoList}  />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    let taskForTodolist = tasks[tl.id]\r\n\r\n                    return (< Grid item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    tasks={taskForTodolist}\r\n                                    removeTask={removeTask}\r\n                                    removeTodoList={removeTodoList}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodoListTitle={changeTodoListTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n\r\nexport default TodoListsList","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string| null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {Container, LinearProgress} from \"@material-ui/core\";\r\nimport TodoListsList from \"../features/TodoListsLists/TodoListsList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\nconst App = React.memo(() => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <ErrorSnackbar/>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n            <Container fixed>\r\n                <TodoListsList/>\r\n            </Container>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default App;\r\n","import {tasksReducer} from '../features/TodoListsLists/tasks-reducer';\r\nimport {todoListsReducer} from '../features/TodoListsLists/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./app/AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './app/store'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}