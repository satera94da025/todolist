{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodoListsLists/todolists-reducer.ts","features/TodoListsLists/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EtitableSpan/EditableSpan.tsx","features/TodoListsLists/TodoList/Task/Task.tsx","features/TodoListsLists/TodoList/Todolist.tsx","features/TodoListsLists/TodoListsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/AppWithRedux.tsx","app/store.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriorities","instance","axios","create","baseURL","withCredentials","headers","instanceForAuth","authAPI","data","post","get","delete","todolistAPI","todolistId","title","put","todoListId","taskId","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","SetAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setAppInitializedAC","changeTodolistEntityStatusAC","entityStatus","updateTaskTC","DomainModel","getState","task","tasks","find","t","id","startDate","priority","description","deadline","then","updateTaskAC","catch","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trimmedTitle","trim","TextField","onChange","e","currentTarget","onKeyPress","key","variant","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","getNewTitle","autoFocus","onDoubleClick","Task","removeTask","useCallback","changeStatus","checked","Completed","New","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","res","setTasksAC","items","tasksForTodoList","filter","map","taskObj","removeTodoList","onClickHandler","changeFilter","onClickHandlerActive","onClickHandlerCompleted","addTask","changeTodoListTitle","Button","ButtonGroup","size","TodoListsList","todoLists","useSelector","state","IsLoggedIn","auth","todolist","Id","removeTaskAC","resultCode","item","addTaskTC","addTodoList","todoList","addTodoListTC","ChangeTodoListAC","changeTodoListTC","filterValue","ChangeTodoListFilterAC","Grid","container","style","padding","spacing","tl","taskForTodolist","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","logOutHandler","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","action","copyState","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","AppWithRedux","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.4052a945.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '63e080d1-f004-48f7-ae2d-df9d85d2ae65'\r\n    }\r\n})\r\n\r\nconst instanceForAuth = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/auth/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '63e080d1-f004-48f7-ae2d-df9d85d2ae65'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TodoTaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\ntype UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type MeParamsType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instanceForAuth.post<ResponseType<{ userId: number }>>('login', data)\r\n    },\r\n    me() {\r\n        return instanceForAuth.get<ResponseType<{data: MeParamsType}>>('me')\r\n    },\r\n    logOut() {\r\n        return instanceForAuth.delete<ResponseType<{ userId: number }>>('login')\r\n    }\r\n}\r\n\r\n\r\nexport const todolistAPI = {\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`/${todolistId}`, {title})\r\n    },\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistType>>('')\r\n    },\r\n    deleteTodoList(todolistId: string) {\r\n        return instance.delete<ResponseType>(`/${todolistId}`)\r\n    },\r\n    createTodoListId(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('', {title})\r\n    },\r\n    getTasks(todoListId: string) {\r\n        return instance.get<GetTasksResponse>(`/${todoListId}/tasks`)\r\n    },\r\n    createTask(todoListId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`/${todoListId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\r\n        return instance.put<UpdateTaskType>(`/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n","\r\nimport {\r\n    ActionsTypeAPP,\r\n    setAppErrorAC,\r\n\r\n    SetAppStatusAC,\r\n\r\n} from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport {ResponseType} from \"../api/todolist-api\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(SetAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(SetAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<ActionsTypeAPP>\r\n\r\n","import { Dispatch } from 'redux'\r\nimport { setAppErrorAC, setAppInitializedAC, SetAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\nexport const loginTC = (data: LoginParamsType ) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(SetAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data,dispatch)\r\n            }\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error,dispatch)\r\n    })\r\n}\r\n\r\nexport const logOutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    authAPI.logOut()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(SetAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof SetAppStatusAC> | ReturnType<typeof setAppErrorAC> |ReturnType<typeof setAppInitializedAC>","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false as boolean\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsTypeAPP): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ActionsTypeAPP = ReturnType<typeof SetAppStatusAC> | ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppInitializedAC>\r\n\r\nexport const SetAppStatusAC = (status: RequestStatusType) =>  ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) =>  ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppInitializedAC = (isInitialized: boolean) =>  ({type: 'APP/SET-INITIALIZED', isInitialized} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppInitializedAC(true))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n        dispatch(setAppInitializedAC(true))\r\n    }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, setAppInitializedAC, SetAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\ntype ActionType =\r\n    | ReturnType<typeof RemoveTodolistAC>\r\n    | ReturnType<typeof AddTodolistAC>\r\n    | ReturnType<typeof ChangeTodoListAC>\r\n    | ReturnType<typeof ChangeTodoListFilterAC>\r\n    | ReturnType<typeof setTodolistAC>\r\n    | ReturnType<typeof SetAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ReturnType<typeof setAppInitializedAC>\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const todoListsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLIST':\r\n            return action.todolist.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todoList, filter: \"all\", entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\n\r\nexport const AddTodolistAC = (todoList: TodolistType) => ({type: 'ADD-TODOLIST', todoList} as const)\r\n\r\nexport const ChangeTodoListAC = (title: string, todoListId: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title,\r\n    todoListId\r\n} as const)\r\n\r\nexport const ChangeTodoListFilterAC = (filter: FilterValuesType, todoListId: string) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    filter,\r\n    todoListId\r\n} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (todoListId: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    todoListId,\r\n    entityStatus\r\n} as const)\r\n\r\nexport const setTodolistAC = (todolist: Array<TodolistType>) => ({type: 'SET-TODOLIST', todolist} as const)\r\n\r\nexport const fetchTodolistTC = () => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    todolistAPI.getTodolist()\r\n        .then((res) => {\r\n            dispatch(setTodolistAC(res.data))\r\n            dispatch(SetAppStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    todolistAPI.createTodoListId(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(AddTodolistAC(res.data.data.item))\r\n                dispatch(SetAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const changeTodoListTC = (title: string, todoListId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    todolistAPI.updateTodolist(todoListId, title)\r\n        .then(() => {\r\n            dispatch(ChangeTodoListAC(title, todoListId))\r\n            dispatch(SetAppStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n\r\nexport const removeTodolistTC = (todolistId: string) =>\r\n    (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        dispatch(SetAppStatusAC('loading'))\r\n        todolistAPI.deleteTodoList(todolistId)\r\n            .then(() => {\r\n                dispatch(RemoveTodolistAC(todolistId))\r\n                dispatch(SetAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'))\r\n            }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n    }","import {AddTodolistAC, changeTodolistEntityStatusAC, RemoveTodolistAC, setTodolistAC} from \"./todolists-reducer\";\r\nimport {TaskStatuses, TaskType, todolistAPI, TodoTaskPriorities} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC, setAppInitializedAC, SetAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n\r\n        case 'SET-TODOLIST': {\r\n            const copyState = {...state}\r\n            action.todolist.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(task => task.id !== action.taskId)}\r\n\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n\r\n        case \"UPDATE-TASK\":\r\n            return ({\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            })\r\n\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todoList.id]: []}\r\n\r\n        case \"REMOVE-TODOLIST\":\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof AddTodolistAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof RemoveTodolistAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof setTodolistAC>\r\n    | ReturnType<typeof SetAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ReturnType<typeof setAppInitializedAC>\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\n\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\n\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    taskId,\r\n    model,\r\n    todolistId\r\n} as const)\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n            dispatch(SetAppStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const removeTasksTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    todolistAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(SetAppStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(SetAppStatusAC('loading'))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(SetAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TodoTaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, DomainModel: UpdateDomainTaskModelType, todolistId: string) => (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n\r\n    const allTasksFromState = getState().tasks;\r\n    const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n    const task = tasksForCurrentTodolist.find(t => {\r\n        return t.id === taskId\r\n    })\r\n\r\n    if (task) {\r\n        dispatch(SetAppStatusAC('loading'))\r\n        todolistAPI.updateTask(todolistId, taskId, {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...DomainModel\r\n        }).then(() => {\r\n            dispatch(updateTaskAC(taskId, DomainModel, todolistId))\r\n            dispatch(SetAppStatusAC('succeeded'))\r\n        }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n\r\n\r\n}\r\n\r\nexport const  AddItemForm = React.memo (function(props: AddItemFormPropsType) {\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null){\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {addItem()}\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                variant={'outlined'}\r\n                error={!!error}\r\n                label={'Input your title'}\r\n                helperText={error}\r\n                disabled={props.entityStatus === 'loading'}\r\n            />\r\n            <IconButton color={'primary'} onClick={addItem} disabled={props.entityStatus === 'loading'}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    getNewTitle: (title: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.value)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        if (title.trim())\r\n            props.getNewTitle(title.trim())\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                variant={'outlined'}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onChange={onChangeHandler}/>\r\n            : <span onDoubleClick={onEditMode}>{props.value}</span>\r\n    )\r\n})\r\n\r\nexport default EditableSpan\r\n\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"../../../../components/EtitableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\nexport type TaskPropsType = {\r\n    todoListId: string;\r\n    changeStatus: (taskId: string, status: TaskStatuses , todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    task: TaskType\r\n}\r\n\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n    const removeTask = useCallback (() => props.removeTask(props.task.id, props.todoListId),[props.removeTask,props.task.id,props.todoListId])\r\n    const changeStatus = useCallback ((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n    },[props.changeStatus,props.task.id,props.todoListId])\r\n    const changeTaskTitle = useCallback ((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todoListId)\r\n    },[props.changeTaskTitle,props.task.id,props.todoListId])\r\n    return <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            onChange={changeStatus}\r\n            color={'primary'}\r\n            checked={props.task.status === TaskStatuses.Completed}/>\r\n        <EditableSpan value={props.task.title} getNewTitle={changeTaskTitle}/>\r\n        <IconButton onClick={removeTask}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </li>\r\n\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\n\r\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"../../../components/EtitableSpan/EditableSpan\";\r\nimport {Button, ButtonGroup} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {FilterValuesType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeStatus: (taskId: string, status: TaskStatuses, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    changeFilter: (filterValue: FilterValuesType, todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n    removeTodoList: (id: string) => void\r\n}\r\n\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    },[])\r\n\r\n    let tasksForTodoList = props.tasks\r\n    if (props.filter === 'active') {\r\n        tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const tasks = tasksForTodoList.map(taskObj => <Task todoListId={props.id} changeStatus={props.changeStatus}\r\n                                                   removeTask={props.removeTask} changeTaskTitle={props.changeTaskTitle}\r\n                                                   task={taskObj}\r\n                                                   key={taskObj.id}/>)\r\n\r\n    const removeTodoList = useCallback(() => props.removeTodoList(props.id), [props.removeTodoList, props.id])\r\n    const onClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n    const onClickHandlerActive = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n    const onClickHandlerCompleted = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        props.changeTodoListTitle(title, props.id)\r\n    }, [props.changeTodoListTitle, props.id])\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <h3>\r\n                <EditableSpan value={props.title} getNewTitle={changeTodoListTitle}/>\r\n                <Button onClick={removeTodoList} disabled={props.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </Button>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} entityStatus={props.entityStatus} />\r\n            <div>\r\n                {tasks}\r\n            </div>\r\n            <div>\r\n                <ButtonGroup size={'small'}>\r\n                    <Button variant={props.filter === 'all' ? 'contained' : 'outlined'}\r\n                            onClick={onClickHandler}>All</Button>\r\n                    <Button color={'primary'} variant={props.filter === 'active' ? 'contained' : 'outlined'}\r\n                            onClick={onClickHandlerActive}>Active\r\n                    </Button>\r\n                    <Button color={'secondary'} variant={props.filter === 'completed' ? 'contained' : 'outlined'}\r\n                            onClick={onClickHandlerCompleted}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodoListTC, ChangeTodoListFilterAC,\r\n    changeTodoListTC,\r\n    fetchTodolistTC, FilterValuesType,\r\n     removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTasksTC, TasksStateType, updateTaskTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./TodoList/Todolist\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nconst TodoListsList: React.FC = React.memo(() => {\r\n\r\n\r\n    let todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const IsLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!IsLoggedIn){\r\n            return\r\n        }\r\n        dispatch(fetchTodolistTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((Id: string, todoListId: string) => {\r\n        dispatch(removeTasksTC(Id, todoListId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todoListId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todoListId: string) => {\r\n        dispatch(updateTaskTC(taskId, {title}, todoListId))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id))\r\n\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((title: string, todoListId: string) => {\r\n        dispatch(changeTodoListTC(title, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((filterValue: FilterValuesType, todoListId: string) => {\r\n        dispatch(ChangeTodoListFilterAC(filterValue, todoListId))\r\n    }, [dispatch])\r\n\r\n    if(!IsLoggedIn){\r\n        return  <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodoList}   />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    let taskForTodolist = tasks[tl.id]\r\n\r\n                    return (< Grid item key={tl.id}>\r\n                            <Paper key={tl.id} style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    tasks={taskForTodolist}\r\n                                    removeTask={removeTask}\r\n                                    removeTodoList={removeTodoList}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodoListTitle={changeTodoListTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n})\r\n\r\nexport default TodoListsList","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string| null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n\r\n    const IsLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            formik.resetForm()\r\n            dispatch(loginTC(values))\r\n        }\r\n    })\r\n\r\n    if(IsLoggedIn){\r\n        return  <Redirect to={'/todolist'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}> {formik.errors.email}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\n\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {CircularProgress, Container, LinearProgress} from \"@material-ui/core\";\r\nimport TodoListsList from \"../features/TodoListsLists/TodoListsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logOutTC} from \"../features/Login/auth-reducer\";\r\n\r\nconst App = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    const logOutHandler = useCallback(() => {\r\n        dispatch(logOutTC())\r\n    },[dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <ErrorSnackbar/>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    { isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/todolist'} render={() => <TodoListsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default App;\r\n","import {tasksReducer} from '../features/TodoListsLists/tasks-reducer';\r\nimport {todoListsReducer} from '../features/TodoListsLists/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./app/AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './app/store'\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <AppWithRedux/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}